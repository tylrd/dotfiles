#!/usr/bin/env bash

function killp () {
  if (( $# == 0 ))
  then
    echo usage: killp portNumber1 portNumber2 ...
  else
    for i;do 
      PROCESS=$(lsof -t -i:$i)
      if [[ $PROCESS ]]; then
        kill -9 $PROCESS
        echo "killed process $PROCESS"
      else
        echo "No process found for port $i"
      fi
    done
  fi;
}

mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  # shellcheck disable=SC2199
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# Use Gitâ€™s colored diff when available
if hash git &>/dev/null ; then
  diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
dataurl() {
  local mimeType
  mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Syntax-highlight JSON strings or files
# echo '{"foo":42}' | j`
j() {
  jq '.'
}

# converts RSA key to single line
convert_key() {
  sed s/$/\\\\n/ | tr -d '\n'
}

# grep for running docker container names and return the first container id
dgrep() {
  if (( $# == 0 )); then
    echo "Usage: dgrep <container name>"
  else
    docker ps | awk -v container=$1 '$0~container{ print $1 }' | head -n 1
  fi
}

dssh() {
  if (( $# == 0 )); then
    echo "Usage: dssh <container name>"
  fi
  local container=$(dgrep $1)

  if [ "${container}" = "" ]; then
    echo "Could not found container matching $1"
    exit 1
  fi

  docker exec -it "${container}" /bin/bash
}

dkill() {
  if (( $# == 0 )); then
    echo "Usage: dkill <container name>"
  fi
  local container=$(dgrep $1)

  if [ "${container}" = "" ]; then
    echo "Could not found container matching $1"
    exit 1
  fi

  echo "Killing container ${container}..."
  docker kill "${container}"
}

# kill all vagrant images
kvagrant() {
  vagrant global-status | awk '/running/{ print $1 }' | xargs vagrant destroy --force
}

# must be run from terraform workspace with "bastion_public_ip" in output
tssh() {
  local ssh_user="${SSH_USER:-taylor.daugherty}"
  local hostname

  if [ "$#" -ne 1  ]; then
    echo "Must provide 1 argument => hostname"
    return 1
  else
    hostname=$1
  fi

  local ssh_opts=(
    -o ForwardAgent=yes
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
  )

  local bastion_ip=$(terraform output bastion_public_ip)

  if [ -z "$bastion_ip" ]; then
    echo "Could not find bastion ip in output."
    return 1
  fi

  local proxy_command="ssh ${ssh_opts[@]} %r@$bastion_ip -W %h:%p"
  ssh "${ssh_opts[@]}" -o ProxyCommand="$proxy_command" $ssh_user@$hostname
}


# Runs chef-client for a given chef role in ephemeral environment
tk() {
  local role=$1

  if [ -z "$role" ]; then
    echo "Must provide role"
    return 1
  fi

  local project=$(gcloud config get-value project 2> /dev/null)

  if [ -z "$project" ]; then
    echo "Could not obtain google project with gcloud."
    return 1
  fi

  local bastion_ip=$(terraform output bastion_public_ip)

  if [ -z "$bastion_ip" ]; then
    echo "Could not find bastion ip in output."
    return 1
  fi

  local environment="ephemeral-${project: -1}"

  echo "Running chef client with role $role, in project $project & environment $environment..."

  local command="${2:-"sudo chef-client -E $environment"}"

  knife ssh "roles:$role" "$command" \
    -A -x taylor.daugherty --ssh-gateway "$bastion_ip" \
    --no-host-key-verify
}
